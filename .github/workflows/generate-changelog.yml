
name: Generate Changelog

on:
  workflow_call:
    inputs:
      version:
        description: 'Semantic version of the release (e.g., v1.2.3)'
        required: true
        type: string
      prev_version:
        description: 'Previous release version (e.g., v1.2.2)'
        required: false
        default: ''
        type: string
      repository:
        description: 'Repository name'
        required: false
        default: ${{ github.repository }}
        type: string
      ref:
        description: 'Branch or SHA for the release'
        required: false
        default: ${{ github.ref }}
        type: string
      github_token:
        description: 'GitHub token'
        required: true
        type: string

jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.token }}
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Generate Changelog
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          set -x

          REPOSITORY=${{ inputs.repository }}
          SHA=$(git rev-parse HEAD)
          echo "sha=${SHA}" >> $GITHUB_OUTPUT

          # Get the previous tag
          if [ -n "${{ inputs.prev_version }}" ] && git rev-list ${{ inputs.prev_version }} 2> /dev/null; then
            PREV_TAG="${{ inputs.prev_version }}"
          else
            PREV_TAG=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ inputs.repository }}/releases/latest | jq -r '.tag_name // empty')
          fi

          # Generate release notes
          NOTES=$(gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ inputs.repository }}/releases/generate-notes \
            -f tag_name="${{ inputs.version }}" \
            -f target_commitish="${SHA}" \
            -f previous_tag_name="${PREV_TAG}" | jq -r '.body')

          # Save sections
          filterfunc() { echo "${NOTES}" | grep "^*\s*:$1:" | sed "s/.*:$1:\s*/* /"; }

          RELEASE_DOC="${PWD}/release.md"
          echo "release_doc=${RELEASE_DOC}" >> $GITHUB_ENV

          echo "**Full Changelog**: https://github.com/${REPOSITORY}/commits/${{ inputs.version }}" > "${RELEASE_DOC}"

          BREAKING_CHANGES="$(filterfunc warning)"
          if [ -n "${BREAKING_CHANGES}" ]; then
            echo "## :warning: Breaking Changes" >> ${RELEASE_DOC}
            echo "${BREAKING_CHANGES}" >> ${RELEASE_DOC}
            echo "" >> ${RELEASE_DOC}
            echo "breaking-changes<<EOF" >> $GITHUB_OUTPUT
            echo "${BREAKING_CHANGES}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          FEATURE_CHANGES="$(filterfunc sparkles)"
          if [ -n "${FEATURE_CHANGES}" ]; then
            echo "## :sparkles: Features" >> ${RELEASE_DOC}
            echo "${FEATURE_CHANGES}" >> ${RELEASE_DOC}
            echo "" >> ${RELEASE_DOC}
            echo "features<<EOF" >> $GITHUB_OUTPUT
            echo "${FEATURE_CHANGES}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          BUG_FIXES="$(filterfunc bug)"
          if [ -n "${BUG_FIXES}" ]; then
            echo "## :bug: Bug Fixes" >> ${RELEASE_DOC}
            echo "${BUG_FIXES}" >> ${RELEASE_DOC}
            echo "" >> ${RELEASE_DOC}
            echo "bug-fixes<<EOF" >> $GITHUB_OUTPUT
            echo "${BUG_FIXES}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          NEW_CONTRIB=$(echo "${NOTES}" | sed -n "/Contributors/,\$p")
          if [ -n "${NEW_CONTRIB}" ]; then
            echo "${NEW_CONTRIB}" >> ${RELEASE_DOC}
            echo "new-contributors<<EOF" >> $GITHUB_OUTPUT
            echo "${NEW_CONTRIB}" | head -n -3 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "${NOTES}" | sed -n "/Changelog/,\$p" >> ${RELEASE_DOC}
          fi

          echo "changelog-file=${RELEASE_DOC}" >> $GITHUB_OUTPUT
